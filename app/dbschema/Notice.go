//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type Notice struct {
	trans	*factory.Transaction
	objects []*Notice
	
	Id       	uint64  	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"" json:"id" xml:"id"`
	ClientId 	uint    	`db:"client_id" bson:"client_id" comment:"" json:"client_id" xml:"client_id"`
	EventId  	uint64  	`db:"event_id" bson:"event_id" comment:"" json:"event_id" xml:"event_id"`
	Created  	uint    	`db:"created,omitempty" bson:"created,omitempty" comment:"创建时间" json:"created" xml:"created"`
	Retry    	uint    	`db:"retry,omitempty" bson:"retry,omitempty" comment:"重试次数" json:"retry" xml:"retry"`
	Finished 	uint    	`db:"finished,omitempty" bson:"finished,omitempty" comment:"完成时间" json:"finished" xml:"finished"`
}

func (this *Notice) Trans() *factory.Transaction {
	return this.trans
}

func (this *Notice) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *Notice) Objects() []*Notice {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *Notice) NewObjects() *[]*Notice {
	this.objects = []*Notice{}
	return &this.objects
}

func (this *Notice) Param() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("notice").SetModel(this)
}

func (this *Notice) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *Notice) List(recv interface{},mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Notice) ListByOffset(recv interface{},mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Notice) Add() (interface{}, error) {
	this.Created = uint(time.Now().Unix())
	return this.Param().SetSend(this).Insert()
}

func (this *Notice) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *Notice) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetMiddleware(mw).Delete()
}

